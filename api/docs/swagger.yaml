basePath: /
definitions:
  models.MessageResponse:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  models.SignInInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.SignUpInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
      passwordConfirm:
        type: string
      photo:
        type: string
    required:
    - email
    - name
    - password
    - passwordConfirm
    - photo
    type: object
  models.TokenResponse:
    properties:
      access_token:
        type: string
      status:
        type: string
    type: object
  models.UserContainer:
    properties:
      user:
        $ref: '#/definitions/models.UserResponse'
    type: object
  models.UserDataResponse:
    properties:
      data:
        $ref: '#/definitions/models.UserContainer'
      status:
        type: string
    type: object
  models.UserMeResponse:
    properties:
      data:
        $ref: '#/definitions/models.UserContainer'
      status:
        type: string
    type: object
  models.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      photo:
        type: string
      provider:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: Backend
  title: API
  version: "1.0"
paths:
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logs out the user by clearing the cookies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
      summary: Log out the current user
      tags:
      - auth
  /auth/refresh:
    get:
      consumes:
      - application/json
      description: Refreshes the access token when the refresh token is valid
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TokenResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.MessageResponse'
      summary: Refresh the access token using the refresh token
      tags:
      - auth
  /auth/signin:
    post:
      consumes:
      - application/json
      description: Logs in an existing user and generates tokens
      parameters:
      - description: SignIn Input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.SignInInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.MessageResponse'
      summary: User sign in
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Registers a new user with email and password
      parameters:
      - description: SignUp Input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.SignUpInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/models.MessageResponse'
      summary: Sign up a new user
      tags:
      - auth
  /user/me:
    get:
      consumes:
      - application/json
      description: Get the details of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserMeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.MessageResponse'
      security:
      - BearerAuth: []
      summary: Get current authenticated user
      tags:
      - user
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
